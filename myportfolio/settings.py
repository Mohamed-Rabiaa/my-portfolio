"""
Django settings for myportfolio project.

This module contains all the configuration settings for the Django portfolio application.
It includes database configuration, installed apps, middleware, authentication settings,
API configuration, CORS settings, and static/media file handling.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/

Author: Mohamed Rabiaa
Version: 1.0.0
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-zufw1)xnfo2=0a709z5bwti_tx!d3_=roa96j=q9*&g#^k-yt!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['testserver', '127.0.0.1', 'localhost']


# Application definition
"""
INSTALLED_APPS: List of Django applications that are activated in this Django instance.
Includes Django built-in apps, third-party packages, and local applications.
"""

INSTALLED_APPS = [
    # Django built-in applications
    "django.contrib.admin",        # Admin interface
    "django.contrib.auth",         # Authentication framework
    "django.contrib.contenttypes", # Content types framework
    "django.contrib.sessions",     # Session framework
    "django.contrib.messages",     # Messaging framework
    "django.contrib.staticfiles",  # Static files management
    
    # Third party apps
    "rest_framework",              # Django REST Framework for API
    "rest_framework_simplejwt",    # JWT authentication for DRF
    "corsheaders",                 # Cross-Origin Resource Sharing headers
    "drf_spectacular",             # API documentation generation
    "django_filters",              # Filtering support for DRF
    
    # Local apps
    "portfolio",                   # Portfolio projects management
    "blog",                        # Blog posts management
    "contact",                     # Contact messages and newsletter
]

"""
MIDDLEWARE: List of middleware classes to process requests/responses.
Order matters - middleware is processed top-to-bottom for requests
and bottom-to-top for responses.
"""
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",              # CORS handling (must be early)
    "common.middleware.SecurityHeadersMiddleware",
    "common.middleware.RequestLoggingMiddleware",
    "common.middleware.APIVersionMiddleware",
    "common.error_handlers.ErrorMonitoringMiddleware",
    "django.middleware.security.SecurityMiddleware",      # Security enhancements
    "django.contrib.sessions.middleware.SessionMiddleware", # Session management
    "django.middleware.common.CommonMiddleware",          # Common functionality
    "django.middleware.csrf.CsrfViewMiddleware",          # CSRF protection
    "django.contrib.auth.middleware.AuthenticationMiddleware", # User authentication
    "django.contrib.messages.middleware.MessageMiddleware",    # Message framework
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Clickjacking protection
]

# Root URL configuration module
ROOT_URLCONF = "myportfolio.urls"

"""
TEMPLATES: Template engine configuration.
Defines how Django processes and renders templates.
"""
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # Additional template directories
        "APP_DIRS": True,  # Look for templates in app directories
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",    # Debug context
                "django.template.context_processors.request",  # Request context
                "django.contrib.auth.context_processors.auth", # Auth context
                "django.contrib.messages.context_processors.messages", # Messages context
            ],
        },
    },
]

# WSGI application entry point
WSGI_APPLICATION = "myportfolio.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

"""
Database configuration:
- Development: SQLite for simplicity and portability
- Production: PostgreSQL configuration available (commented out)
"""
# For development, using SQLite for simplicity
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# For production, you can use PostgreSQL by uncommenting the config below
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": "portfolio_db",
#         "USER": "postgres",
#         "PASSWORD": "your_password",
#         "HOST": "localhost",
#         "PORT": "5432",
#     }
# }
# and uncommenting the SQLite config below:
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

"""
Password validation configuration:
Defines validators to ensure strong password requirements.
"""
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

"""
Internationalization and localization settings:
- Language: English (US)
- Timezone: UTC
- Internationalization and timezone support enabled
"""
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True   # Enable internationalization
USE_TZ = True     # Enable timezone support


# Logging Configuration
# https://docs.djangoproject.com/en/4.2/topics/logging/

"""
Comprehensive logging configuration:
- Console logging for development
- File logging for production
- Structured logging with different levels
- Separate loggers for different components
"""
import os

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{{\"level\": \"{levelname}\", \"time\": \"{asctime}\", \"module\": \"{module}\", \"message\": \"{message}\"}}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'portfolio.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'portfolio_errors.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'performance_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'performance.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 5,
            'formatter': 'json',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'portfolio': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'blog': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'contact': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'performance': {
            'handlers': ['performance_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'api.versioning': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'WARNING',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
}

# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / 'logs'
if not LOGS_DIR.exists():
    LOGS_DIR.mkdir(exist_ok=True)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

"""
Django REST Framework Configuration:
Configures API authentication, permissions, documentation, and pagination.
"""
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT auth
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # Read-only for anonymous
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # API schema generation
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Default page size for paginated responses
    'EXCEPTION_HANDLER': 'common.error_handlers.custom_exception_handler',  # Custom error handling
    'DEFAULT_VERSIONING_CLASS': 'common.versioning.APIVersioning',  # API versioning
    'DEFAULT_VERSION': 'v1',  # Default API version
    'ALLOWED_VERSIONS': ['v1', 'v2'],  # Supported API versions
}

"""
JWT (JSON Web Token) Configuration:
Defines token lifetimes and refresh behavior for API authentication.
"""
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Access token valid for 1 hour
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # Refresh token valid for 7 days
    'ROTATE_REFRESH_TOKENS': True,                   # Generate new refresh token on use
}

"""
CORS (Cross-Origin Resource Sharing) Configuration:
Allows frontend applications to make requests to the Django API.
Configured for common development server ports.
"""
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React development server
    "http://127.0.0.1:3000",
    "http://localhost:5173",  # Vite development server (actual port)
    "http://127.0.0.1:5173",
    "http://localhost:5174",  # Vite development server (backup port)
    "http://127.0.0.1:5174",
]

CORS_ALLOW_CREDENTIALS = True  # Allow cookies and auth headers in CORS requests

# API Versioning Configuration
DEFAULT_API_VERSION = 'v1'
ALLOWED_API_VERSIONS = ['v1', 'v2']
DEPRECATED_API_VERSIONS = {
    # Example: 'v0': {
    #     'sunset_date': '2024-12-31',
    #     'replacement_version': 'v1'
    # }
}

"""
API Documentation Configuration:
Settings for automatic API documentation generation using drf-spectacular.
"""
SPECTACULAR_SETTINGS = {
    'TITLE': 'Portfolio API',
    'DESCRIPTION': 'API for portfolio website',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,  # Don't include schema in served docs
}

"""
Static and Media Files Configuration:
- Static files: CSS, JavaScript, images served by the application
- Media files: User-uploaded content (project images, etc.)
"""
# Static files configuration
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Production static files location
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Additional static files directories
]

# Media files configuration
MEDIA_URL = '/media/'           # URL prefix for media files
MEDIA_ROOT = BASE_DIR / 'media' # Directory where uploaded files are stored
